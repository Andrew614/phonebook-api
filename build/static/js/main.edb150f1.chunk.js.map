{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","alert","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","date","Date","Math","random","length","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"kNAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,4BACKH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCSjC,EAfA,WAEX,OADgBI,IAAMC,IAHV,UAIGC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KARV,SAQwBD,GACrBH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAbJ,SAaI,YAAwBD,GAAMF,GAC/BH,KAAK,SAAAC,GAAQ,OAAIA,EAASC,Q,4NCX7C,IAkFeK,EAlFH,SAACC,GAAW,IAAD,EAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,OAGSF,mBAAS,iBAHlB,mBAGdG,EAHc,KAGLC,EAHK,OAISJ,oBAAS,GAJlB,mBAIdK,EAJc,KAILC,EAJK,KAMrBC,oBAAU,WACRC,IAEGjB,KAAK,SAAAkB,GACJP,EAASO,MAEZ,IAEH,IAqBMC,EAAqB,SAAAd,GACzB,IAAMb,EAAOkB,EAAMU,KAAK,SAAAC,GAAC,OAAIA,EAAEhB,KAAOA,IAChCiB,E,qVAAW,IAAQ9B,EAAR,CAAcG,WAAYH,EAAKG,YAEhDsB,EACUZ,EAAIiB,GACXtB,KAAK,SAAAuB,GACJZ,EAASD,EAAMc,IAAI,SAAAhC,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAO+B,OAEpDE,MAAM,SAAAC,GACLC,MAAM,aAAD,OACUnC,EAAKI,QADf,sCAGLe,EAASD,EAAMkB,OAAO,SAAAP,GAAC,OAAIA,EAAEhB,KAAOA,QAIpCwB,EAAcf,EAAUJ,EAAQA,EAAMkB,OAAO,SAAApC,GAAI,OAAIA,EAAKG,YAUhE,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMkB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAhBee,EAAYL,IAAI,SAAAhC,GAAI,OACrC,kBAAC,EAAD,CACEsC,IAAKtC,EAAKa,GACVb,KAAMA,EACNC,iBAAkB,kBAAM0B,EAAmB3B,EAAKa,UAehD,0BAAM0B,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBtC,QAASgB,EACTuB,KAAM,IAAIC,KACVzC,UAAW0C,KAAKC,SAAW,GAC3BjC,GAAIK,EAAM6B,OAAS,GAErBtB,EACUiB,GACPlC,KAAK,SAAAuB,GACJZ,EAASD,EAAM8B,OAAOjB,IACtBV,EAAW,QAgDX,2BAAO4B,MAAO7B,EACZ8B,SA7CiB,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB5B,EAAWmB,EAAMa,OAAOJ,UA4CpB,4BAAQK,KAAK,UAAb,WC5ERC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.edb150f1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important\r\n        ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote}\n          onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}